// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gpss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gpss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gpss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gpss_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpss_2eproto;
namespace gpssfdw {
class EstimateSizeRequest;
class EstimateSizeRequestDefaultTypeInternal;
extern EstimateSizeRequestDefaultTypeInternal _EstimateSizeRequest_default_instance_;
class EstimateSizeResponse;
class EstimateSizeResponseDefaultTypeInternal;
extern EstimateSizeResponseDefaultTypeInternal _EstimateSizeResponse_default_instance_;
class StartKafkaStreamRequest;
class StartKafkaStreamRequestDefaultTypeInternal;
extern StartKafkaStreamRequestDefaultTypeInternal _StartKafkaStreamRequest_default_instance_;
class StartKafkaStreamResponse;
class StartKafkaStreamResponseDefaultTypeInternal;
extern StartKafkaStreamResponseDefaultTypeInternal _StartKafkaStreamResponse_default_instance_;
class StopKafkaStreamRequest;
class StopKafkaStreamRequestDefaultTypeInternal;
extern StopKafkaStreamRequestDefaultTypeInternal _StopKafkaStreamRequest_default_instance_;
class StopKafkaStreamResponse;
class StopKafkaStreamResponseDefaultTypeInternal;
extern StopKafkaStreamResponseDefaultTypeInternal _StopKafkaStreamResponse_default_instance_;
class StreamDataRequest;
class StreamDataRequestDefaultTypeInternal;
extern StreamDataRequestDefaultTypeInternal _StreamDataRequest_default_instance_;
class StreamDataResponse;
class StreamDataResponseDefaultTypeInternal;
extern StreamDataResponseDefaultTypeInternal _StreamDataResponse_default_instance_;
}  // namespace gpssfdw
PROTOBUF_NAMESPACE_OPEN
template<> ::gpssfdw::EstimateSizeRequest* Arena::CreateMaybeMessage<::gpssfdw::EstimateSizeRequest>(Arena*);
template<> ::gpssfdw::EstimateSizeResponse* Arena::CreateMaybeMessage<::gpssfdw::EstimateSizeResponse>(Arena*);
template<> ::gpssfdw::StartKafkaStreamRequest* Arena::CreateMaybeMessage<::gpssfdw::StartKafkaStreamRequest>(Arena*);
template<> ::gpssfdw::StartKafkaStreamResponse* Arena::CreateMaybeMessage<::gpssfdw::StartKafkaStreamResponse>(Arena*);
template<> ::gpssfdw::StopKafkaStreamRequest* Arena::CreateMaybeMessage<::gpssfdw::StopKafkaStreamRequest>(Arena*);
template<> ::gpssfdw::StopKafkaStreamResponse* Arena::CreateMaybeMessage<::gpssfdw::StopKafkaStreamResponse>(Arena*);
template<> ::gpssfdw::StreamDataRequest* Arena::CreateMaybeMessage<::gpssfdw::StreamDataRequest>(Arena*);
template<> ::gpssfdw::StreamDataResponse* Arena::CreateMaybeMessage<::gpssfdw::StreamDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gpssfdw {

// ===================================================================

class EstimateSizeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.EstimateSizeRequest) */ {
 public:
  EstimateSizeRequest();
  virtual ~EstimateSizeRequest();

  EstimateSizeRequest(const EstimateSizeRequest& from);
  EstimateSizeRequest(EstimateSizeRequest&& from) noexcept
    : EstimateSizeRequest() {
    *this = ::std::move(from);
  }

  inline EstimateSizeRequest& operator=(const EstimateSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateSizeRequest& operator=(EstimateSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateSizeRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateSizeRequest*>(
               &_EstimateSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EstimateSizeRequest* other);
  friend void swap(EstimateSizeRequest& a, EstimateSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstimateSizeRequest* New() const final {
    return CreateMaybeMessage<EstimateSizeRequest>(nullptr);
  }

  EstimateSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateSizeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateSizeRequest& from);
  void MergeFrom(const EstimateSizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateSizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.EstimateSizeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:gpssfdw.EstimateSizeRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class EstimateSizeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.EstimateSizeResponse) */ {
 public:
  EstimateSizeResponse();
  virtual ~EstimateSizeResponse();

  EstimateSizeResponse(const EstimateSizeResponse& from);
  EstimateSizeResponse(EstimateSizeResponse&& from) noexcept
    : EstimateSizeResponse() {
    *this = ::std::move(from);
  }

  inline EstimateSizeResponse& operator=(const EstimateSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateSizeResponse& operator=(EstimateSizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateSizeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateSizeResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateSizeResponse*>(
               &_EstimateSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EstimateSizeResponse* other);
  friend void swap(EstimateSizeResponse& a, EstimateSizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EstimateSizeResponse* New() const final {
    return CreateMaybeMessage<EstimateSizeResponse>(nullptr);
  }

  EstimateSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateSizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateSizeResponse& from);
  void MergeFrom(const EstimateSizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.EstimateSizeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 estimate_size = 1;
  void clear_estimate_size();
  static const int kEstimateSizeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 estimate_size() const;
  void set_estimate_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:gpssfdw.EstimateSizeResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 estimate_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class StreamDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.StreamDataRequest) */ {
 public:
  StreamDataRequest();
  virtual ~StreamDataRequest();

  StreamDataRequest(const StreamDataRequest& from);
  StreamDataRequest(StreamDataRequest&& from) noexcept
    : StreamDataRequest() {
    *this = ::std::move(from);
  }

  inline StreamDataRequest& operator=(const StreamDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataRequest& operator=(StreamDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDataRequest* internal_default_instance() {
    return reinterpret_cast<const StreamDataRequest*>(
               &_StreamDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StreamDataRequest* other);
  friend void swap(StreamDataRequest& a, StreamDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamDataRequest* New() const final {
    return CreateMaybeMessage<StreamDataRequest>(nullptr);
  }

  StreamDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataRequest& from);
  void MergeFrom(const StreamDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.StreamDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // int32 segid = 2;
  void clear_segid();
  static const int kSegidFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 segid() const;
  void set_segid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:gpssfdw.StreamDataRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 segid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class StreamDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.StreamDataResponse) */ {
 public:
  StreamDataResponse();
  virtual ~StreamDataResponse();

  StreamDataResponse(const StreamDataResponse& from);
  StreamDataResponse(StreamDataResponse&& from) noexcept
    : StreamDataResponse() {
    *this = ::std::move(from);
  }

  inline StreamDataResponse& operator=(const StreamDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataResponse& operator=(StreamDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamDataResponse* internal_default_instance() {
    return reinterpret_cast<const StreamDataResponse*>(
               &_StreamDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StreamDataResponse* other);
  friend void swap(StreamDataResponse& a, StreamDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamDataResponse* New() const final {
    return CreateMaybeMessage<StreamDataResponse>(nullptr);
  }

  StreamDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataResponse& from);
  void MergeFrom(const StreamDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.StreamDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:gpssfdw.StreamDataResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class StartKafkaStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.StartKafkaStreamRequest) */ {
 public:
  StartKafkaStreamRequest();
  virtual ~StartKafkaStreamRequest();

  StartKafkaStreamRequest(const StartKafkaStreamRequest& from);
  StartKafkaStreamRequest(StartKafkaStreamRequest&& from) noexcept
    : StartKafkaStreamRequest() {
    *this = ::std::move(from);
  }

  inline StartKafkaStreamRequest& operator=(const StartKafkaStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartKafkaStreamRequest& operator=(StartKafkaStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartKafkaStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartKafkaStreamRequest* internal_default_instance() {
    return reinterpret_cast<const StartKafkaStreamRequest*>(
               &_StartKafkaStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StartKafkaStreamRequest* other);
  friend void swap(StartKafkaStreamRequest& a, StartKafkaStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartKafkaStreamRequest* New() const final {
    return CreateMaybeMessage<StartKafkaStreamRequest>(nullptr);
  }

  StartKafkaStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartKafkaStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartKafkaStreamRequest& from);
  void MergeFrom(const StartKafkaStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartKafkaStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.StartKafkaStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);

  // string brokers = 2;
  void clear_brokers();
  static const int kBrokersFieldNumber = 2;
  const std::string& brokers() const;
  void set_brokers(const std::string& value);
  void set_brokers(std::string&& value);
  void set_brokers(const char* value);
  void set_brokers(const char* value, size_t size);
  std::string* mutable_brokers();
  std::string* release_brokers();
  void set_allocated_brokers(std::string* brokers);

  // @@protoc_insertion_point(class_scope:gpssfdw.StartKafkaStreamRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brokers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class StartKafkaStreamResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.StartKafkaStreamResponse) */ {
 public:
  StartKafkaStreamResponse();
  virtual ~StartKafkaStreamResponse();

  StartKafkaStreamResponse(const StartKafkaStreamResponse& from);
  StartKafkaStreamResponse(StartKafkaStreamResponse&& from) noexcept
    : StartKafkaStreamResponse() {
    *this = ::std::move(from);
  }

  inline StartKafkaStreamResponse& operator=(const StartKafkaStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartKafkaStreamResponse& operator=(StartKafkaStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartKafkaStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartKafkaStreamResponse* internal_default_instance() {
    return reinterpret_cast<const StartKafkaStreamResponse*>(
               &_StartKafkaStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StartKafkaStreamResponse* other);
  friend void swap(StartKafkaStreamResponse& a, StartKafkaStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartKafkaStreamResponse* New() const final {
    return CreateMaybeMessage<StartKafkaStreamResponse>(nullptr);
  }

  StartKafkaStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartKafkaStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartKafkaStreamResponse& from);
  void MergeFrom(const StartKafkaStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartKafkaStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.StartKafkaStreamResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:gpssfdw.StartKafkaStreamResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class StopKafkaStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.StopKafkaStreamRequest) */ {
 public:
  StopKafkaStreamRequest();
  virtual ~StopKafkaStreamRequest();

  StopKafkaStreamRequest(const StopKafkaStreamRequest& from);
  StopKafkaStreamRequest(StopKafkaStreamRequest&& from) noexcept
    : StopKafkaStreamRequest() {
    *this = ::std::move(from);
  }

  inline StopKafkaStreamRequest& operator=(const StopKafkaStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopKafkaStreamRequest& operator=(StopKafkaStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopKafkaStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopKafkaStreamRequest* internal_default_instance() {
    return reinterpret_cast<const StopKafkaStreamRequest*>(
               &_StopKafkaStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StopKafkaStreamRequest* other);
  friend void swap(StopKafkaStreamRequest& a, StopKafkaStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopKafkaStreamRequest* New() const final {
    return CreateMaybeMessage<StopKafkaStreamRequest>(nullptr);
  }

  StopKafkaStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopKafkaStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopKafkaStreamRequest& from);
  void MergeFrom(const StopKafkaStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopKafkaStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.StopKafkaStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:gpssfdw.StopKafkaStreamRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// -------------------------------------------------------------------

class StopKafkaStreamResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpssfdw.StopKafkaStreamResponse) */ {
 public:
  StopKafkaStreamResponse();
  virtual ~StopKafkaStreamResponse();

  StopKafkaStreamResponse(const StopKafkaStreamResponse& from);
  StopKafkaStreamResponse(StopKafkaStreamResponse&& from) noexcept
    : StopKafkaStreamResponse() {
    *this = ::std::move(from);
  }

  inline StopKafkaStreamResponse& operator=(const StopKafkaStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopKafkaStreamResponse& operator=(StopKafkaStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopKafkaStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopKafkaStreamResponse* internal_default_instance() {
    return reinterpret_cast<const StopKafkaStreamResponse*>(
               &_StopKafkaStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(StopKafkaStreamResponse* other);
  friend void swap(StopKafkaStreamResponse& a, StopKafkaStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopKafkaStreamResponse* New() const final {
    return CreateMaybeMessage<StopKafkaStreamResponse>(nullptr);
  }

  StopKafkaStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopKafkaStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopKafkaStreamResponse& from);
  void MergeFrom(const StopKafkaStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopKafkaStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpssfdw.StopKafkaStreamResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gpss_2eproto);
    return ::descriptor_table_gpss_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gpssfdw.StopKafkaStreamResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gpss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstimateSizeRequest

// string id = 1;
inline void EstimateSizeRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EstimateSizeRequest::id() const {
  // @@protoc_insertion_point(field_get:gpssfdw.EstimateSizeRequest.id)
  return id_.GetNoArena();
}
inline void EstimateSizeRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.EstimateSizeRequest.id)
}
inline void EstimateSizeRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.EstimateSizeRequest.id)
}
inline void EstimateSizeRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.EstimateSizeRequest.id)
}
inline void EstimateSizeRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.EstimateSizeRequest.id)
}
inline std::string* EstimateSizeRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.EstimateSizeRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstimateSizeRequest::release_id() {
  // @@protoc_insertion_point(field_release:gpssfdw.EstimateSizeRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstimateSizeRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.EstimateSizeRequest.id)
}

// -------------------------------------------------------------------

// EstimateSizeResponse

// int64 estimate_size = 1;
inline void EstimateSizeResponse::clear_estimate_size() {
  estimate_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateSizeResponse::estimate_size() const {
  // @@protoc_insertion_point(field_get:gpssfdw.EstimateSizeResponse.estimate_size)
  return estimate_size_;
}
inline void EstimateSizeResponse::set_estimate_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  estimate_size_ = value;
  // @@protoc_insertion_point(field_set:gpssfdw.EstimateSizeResponse.estimate_size)
}

// -------------------------------------------------------------------

// StreamDataRequest

// string id = 1;
inline void StreamDataRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StreamDataRequest::id() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StreamDataRequest.id)
  return id_.GetNoArena();
}
inline void StreamDataRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.StreamDataRequest.id)
}
inline void StreamDataRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.StreamDataRequest.id)
}
inline void StreamDataRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.StreamDataRequest.id)
}
inline void StreamDataRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.StreamDataRequest.id)
}
inline std::string* StreamDataRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.StreamDataRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamDataRequest::release_id() {
  // @@protoc_insertion_point(field_release:gpssfdw.StreamDataRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamDataRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.StreamDataRequest.id)
}

// int32 segid = 2;
inline void StreamDataRequest::clear_segid() {
  segid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamDataRequest::segid() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StreamDataRequest.segid)
  return segid_;
}
inline void StreamDataRequest::set_segid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segid_ = value;
  // @@protoc_insertion_point(field_set:gpssfdw.StreamDataRequest.segid)
}

// -------------------------------------------------------------------

// StreamDataResponse

// bytes msg = 1;
inline void StreamDataResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StreamDataResponse::msg() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StreamDataResponse.msg)
  return msg_.GetNoArena();
}
inline void StreamDataResponse::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.StreamDataResponse.msg)
}
inline void StreamDataResponse::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.StreamDataResponse.msg)
}
inline void StreamDataResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.StreamDataResponse.msg)
}
inline void StreamDataResponse::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.StreamDataResponse.msg)
}
inline std::string* StreamDataResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.StreamDataResponse.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StreamDataResponse::release_msg() {
  // @@protoc_insertion_point(field_release:gpssfdw.StreamDataResponse.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StreamDataResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.StreamDataResponse.msg)
}

// -------------------------------------------------------------------

// StartKafkaStreamRequest

// string topic = 1;
inline void StartKafkaStreamRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartKafkaStreamRequest::topic() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StartKafkaStreamRequest.topic)
  return topic_.GetNoArena();
}
inline void StartKafkaStreamRequest::set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.StartKafkaStreamRequest.topic)
}
inline void StartKafkaStreamRequest::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.StartKafkaStreamRequest.topic)
}
inline void StartKafkaStreamRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.StartKafkaStreamRequest.topic)
}
inline void StartKafkaStreamRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.StartKafkaStreamRequest.topic)
}
inline std::string* StartKafkaStreamRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.StartKafkaStreamRequest.topic)
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartKafkaStreamRequest::release_topic() {
  // @@protoc_insertion_point(field_release:gpssfdw.StartKafkaStreamRequest.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartKafkaStreamRequest::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.StartKafkaStreamRequest.topic)
}

// string brokers = 2;
inline void StartKafkaStreamRequest::clear_brokers() {
  brokers_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartKafkaStreamRequest::brokers() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StartKafkaStreamRequest.brokers)
  return brokers_.GetNoArena();
}
inline void StartKafkaStreamRequest::set_brokers(const std::string& value) {
  
  brokers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.StartKafkaStreamRequest.brokers)
}
inline void StartKafkaStreamRequest::set_brokers(std::string&& value) {
  
  brokers_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.StartKafkaStreamRequest.brokers)
}
inline void StartKafkaStreamRequest::set_brokers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brokers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.StartKafkaStreamRequest.brokers)
}
inline void StartKafkaStreamRequest::set_brokers(const char* value, size_t size) {
  
  brokers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.StartKafkaStreamRequest.brokers)
}
inline std::string* StartKafkaStreamRequest::mutable_brokers() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.StartKafkaStreamRequest.brokers)
  return brokers_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartKafkaStreamRequest::release_brokers() {
  // @@protoc_insertion_point(field_release:gpssfdw.StartKafkaStreamRequest.brokers)
  
  return brokers_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartKafkaStreamRequest::set_allocated_brokers(std::string* brokers) {
  if (brokers != nullptr) {
    
  } else {
    
  }
  brokers_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brokers);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.StartKafkaStreamRequest.brokers)
}

// -------------------------------------------------------------------

// StartKafkaStreamResponse

// string id = 1;
inline void StartKafkaStreamResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StartKafkaStreamResponse::id() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StartKafkaStreamResponse.id)
  return id_.GetNoArena();
}
inline void StartKafkaStreamResponse::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.StartKafkaStreamResponse.id)
}
inline void StartKafkaStreamResponse::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.StartKafkaStreamResponse.id)
}
inline void StartKafkaStreamResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.StartKafkaStreamResponse.id)
}
inline void StartKafkaStreamResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.StartKafkaStreamResponse.id)
}
inline std::string* StartKafkaStreamResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.StartKafkaStreamResponse.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StartKafkaStreamResponse::release_id() {
  // @@protoc_insertion_point(field_release:gpssfdw.StartKafkaStreamResponse.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StartKafkaStreamResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.StartKafkaStreamResponse.id)
}

// -------------------------------------------------------------------

// StopKafkaStreamRequest

// string id = 1;
inline void StopKafkaStreamRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopKafkaStreamRequest::id() const {
  // @@protoc_insertion_point(field_get:gpssfdw.StopKafkaStreamRequest.id)
  return id_.GetNoArena();
}
inline void StopKafkaStreamRequest::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpssfdw.StopKafkaStreamRequest.id)
}
inline void StopKafkaStreamRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpssfdw.StopKafkaStreamRequest.id)
}
inline void StopKafkaStreamRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpssfdw.StopKafkaStreamRequest.id)
}
inline void StopKafkaStreamRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpssfdw.StopKafkaStreamRequest.id)
}
inline std::string* StopKafkaStreamRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:gpssfdw.StopKafkaStreamRequest.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopKafkaStreamRequest::release_id() {
  // @@protoc_insertion_point(field_release:gpssfdw.StopKafkaStreamRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopKafkaStreamRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gpssfdw.StopKafkaStreamRequest.id)
}

// -------------------------------------------------------------------

// StopKafkaStreamResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpssfdw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gpss_2eproto
