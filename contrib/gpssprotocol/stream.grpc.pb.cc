// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: stream.proto

#include "stream.pb.h"
#include "stream.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gpss {

static const char* GreenplumStreamServer_method_names[] = {
  "/gpss.GreenplumStreamServer/Consume",
};

std::unique_ptr< GreenplumStreamServer::Stub> GreenplumStreamServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GreenplumStreamServer::Stub> stub(new GreenplumStreamServer::Stub(channel));
  return stub;
}

GreenplumStreamServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Consume_(GreenplumStreamServer_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::gpss::StreamMessages>* GreenplumStreamServer::Stub::ConsumeRaw(::grpc::ClientContext* context, const ::gpss::ConsumeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::gpss::StreamMessages>::Create(channel_.get(), rpcmethod_Consume_, context, request);
}

::grpc::ClientAsyncReader< ::gpss::StreamMessages>* GreenplumStreamServer::Stub::AsyncConsumeRaw(::grpc::ClientContext* context, const ::gpss::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gpss::StreamMessages>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gpss::StreamMessages>* GreenplumStreamServer::Stub::PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::gpss::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gpss::StreamMessages>::Create(channel_.get(), cq, rpcmethod_Consume_, context, request, false, nullptr);
}

GreenplumStreamServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GreenplumStreamServer_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GreenplumStreamServer::Service, ::gpss::ConsumeRequest, ::gpss::StreamMessages>(
          std::mem_fn(&GreenplumStreamServer::Service::Consume), this)));
}

GreenplumStreamServer::Service::~Service() {
}

::grpc::Status GreenplumStreamServer::Service::Consume(::grpc::ServerContext* context, const ::gpss::ConsumeRequest* request, ::grpc::ServerWriter< ::gpss::StreamMessages>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gpss

