// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef PROTOBUF_INCLUDED_stream_2eproto
#define PROTOBUF_INCLUDED_stream_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stream_2eproto 

namespace protobuf_stream_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_stream_2eproto
namespace gpss {
class ConsumeRequest;
class ConsumeRequestDefaultTypeInternal;
extern ConsumeRequestDefaultTypeInternal _ConsumeRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class StreamMessages;
class StreamMessagesDefaultTypeInternal;
extern StreamMessagesDefaultTypeInternal _StreamMessages_default_instance_;
}  // namespace gpss
namespace google {
namespace protobuf {
template<> ::gpss::ConsumeRequest* Arena::CreateMaybeMessage<::gpss::ConsumeRequest>(Arena*);
template<> ::gpss::Empty* Arena::CreateMaybeMessage<::gpss::Empty>(Arena*);
template<> ::gpss::Parameter* Arena::CreateMaybeMessage<::gpss::Parameter>(Arena*);
template<> ::gpss::StreamMessages* Arena::CreateMaybeMessage<::gpss::StreamMessages>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gpss {

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gpss.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gpss.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamMessages : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gpss.StreamMessages) */ {
 public:
  StreamMessages();
  virtual ~StreamMessages();

  StreamMessages(const StreamMessages& from);

  inline StreamMessages& operator=(const StreamMessages& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamMessages(StreamMessages&& from) noexcept
    : StreamMessages() {
    *this = ::std::move(from);
  }

  inline StreamMessages& operator=(StreamMessages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamMessages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamMessages* internal_default_instance() {
    return reinterpret_cast<const StreamMessages*>(
               &_StreamMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StreamMessages* other);
  friend void swap(StreamMessages& a, StreamMessages& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamMessages* New() const final {
    return CreateMaybeMessage<StreamMessages>(NULL);
  }

  StreamMessages* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StreamMessages>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StreamMessages& from);
  void MergeFrom(const StreamMessages& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMessages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::std::string& messages(int index) const;
  ::std::string* mutable_messages(int index);
  void set_messages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_messages(int index, ::std::string&& value);
  #endif
  void set_messages(int index, const char* value);
  void set_messages(int index, const void* value, size_t size);
  ::std::string* add_messages();
  void add_messages(const ::std::string& value);
  #if LANG_CXX11
  void add_messages(::std::string&& value);
  #endif
  void add_messages(const char* value);
  void add_messages(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& messages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_messages();

  // @@protoc_insertion_point(class_scope:gpss.StreamMessages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gpss.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Parameter* other);
  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(NULL);
  }

  Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string Value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:gpss.Parameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsumeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gpss.ConsumeRequest) */ {
 public:
  ConsumeRequest();
  virtual ~ConsumeRequest();

  ConsumeRequest(const ConsumeRequest& from);

  inline ConsumeRequest& operator=(const ConsumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsumeRequest(ConsumeRequest&& from) noexcept
    : ConsumeRequest() {
    *this = ::std::move(from);
  }

  inline ConsumeRequest& operator=(ConsumeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsumeRequest* internal_default_instance() {
    return reinterpret_cast<const ConsumeRequest*>(
               &_ConsumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConsumeRequest* other);
  friend void swap(ConsumeRequest& a, ConsumeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsumeRequest* New() const final {
    return CreateMaybeMessage<ConsumeRequest>(NULL);
  }

  ConsumeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsumeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsumeRequest& from);
  void MergeFrom(const ConsumeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsumeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gpss.Parameter Parameters = 7;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 7;
  ::gpss::Parameter* mutable_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::gpss::Parameter >*
      mutable_parameters();
  const ::gpss::Parameter& parameters(int index) const;
  ::gpss::Parameter* add_parameters();
  const ::google::protobuf::RepeatedPtrField< ::gpss::Parameter >&
      parameters() const;

  // string XID = 1;
  void clear_xid();
  static const int kXIDFieldNumber = 1;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const char* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // int32 CID = 2;
  void clear_cid();
  static const int kCIDFieldNumber = 2;
  ::google::protobuf::int32 cid() const;
  void set_cid(::google::protobuf::int32 value);

  // int32 SN = 3;
  void clear_sn();
  static const int kSNFieldNumber = 3;
  ::google::protobuf::int32 sn() const;
  void set_sn(::google::protobuf::int32 value);

  // int32 SegmentID = 4;
  void clear_segmentid();
  static const int kSegmentIDFieldNumber = 4;
  ::google::protobuf::int32 segmentid() const;
  void set_segmentid(::google::protobuf::int32 value);

  // int32 SegmentCount = 5;
  void clear_segmentcount();
  static const int kSegmentCountFieldNumber = 5;
  ::google::protobuf::int32 segmentcount() const;
  void set_segmentcount(::google::protobuf::int32 value);

  // int32 SessionID = 6;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 6;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gpss.ConsumeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gpss::Parameter > parameters_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::int32 cid_;
  ::google::protobuf::int32 sn_;
  ::google::protobuf::int32 segmentid_;
  ::google::protobuf::int32 segmentcount_;
  ::google::protobuf::int32 sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// StreamMessages

// repeated bytes Messages = 1;
inline int StreamMessages::messages_size() const {
  return messages_.size();
}
inline void StreamMessages::clear_messages() {
  messages_.Clear();
}
inline const ::std::string& StreamMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:gpss.StreamMessages.Messages)
  return messages_.Get(index);
}
inline ::std::string* StreamMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:gpss.StreamMessages.Messages)
  return messages_.Mutable(index);
}
inline void StreamMessages::set_messages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gpss.StreamMessages.Messages)
  messages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamMessages::set_messages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gpss.StreamMessages.Messages)
  messages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamMessages::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gpss.StreamMessages.Messages)
}
inline void StreamMessages::set_messages(int index, const void* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gpss.StreamMessages.Messages)
}
inline ::std::string* StreamMessages::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:gpss.StreamMessages.Messages)
  return messages_.Add();
}
inline void StreamMessages::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gpss.StreamMessages.Messages)
}
#if LANG_CXX11
inline void StreamMessages::add_messages(::std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gpss.StreamMessages.Messages)
}
#endif
inline void StreamMessages::add_messages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gpss.StreamMessages.Messages)
}
inline void StreamMessages::add_messages(const void* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gpss.StreamMessages.Messages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamMessages::messages() const {
  // @@protoc_insertion_point(field_list:gpss.StreamMessages.Messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:gpss.StreamMessages.Messages)
  return &messages_;
}

// -------------------------------------------------------------------

// Parameter

// string Key = 1;
inline void Parameter::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::key() const {
  // @@protoc_insertion_point(field_get:gpss.Parameter.Key)
  return key_.GetNoArena();
}
inline void Parameter::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpss.Parameter.Key)
}
#if LANG_CXX11
inline void Parameter::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpss.Parameter.Key)
}
#endif
inline void Parameter::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpss.Parameter.Key)
}
inline void Parameter::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpss.Parameter.Key)
}
inline ::std::string* Parameter::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:gpss.Parameter.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_key() {
  // @@protoc_insertion_point(field_release:gpss.Parameter.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gpss.Parameter.Key)
}

// string Value = 2;
inline void Parameter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Parameter::value() const {
  // @@protoc_insertion_point(field_get:gpss.Parameter.Value)
  return value_.GetNoArena();
}
inline void Parameter::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpss.Parameter.Value)
}
#if LANG_CXX11
inline void Parameter::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpss.Parameter.Value)
}
#endif
inline void Parameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpss.Parameter.Value)
}
inline void Parameter::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpss.Parameter.Value)
}
inline ::std::string* Parameter::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:gpss.Parameter.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Parameter::release_value() {
  // @@protoc_insertion_point(field_release:gpss.Parameter.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Parameter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gpss.Parameter.Value)
}

// -------------------------------------------------------------------

// ConsumeRequest

// string XID = 1;
inline void ConsumeRequest::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConsumeRequest::xid() const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.XID)
  return xid_.GetNoArena();
}
inline void ConsumeRequest::set_xid(const ::std::string& value) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gpss.ConsumeRequest.XID)
}
#if LANG_CXX11
inline void ConsumeRequest::set_xid(::std::string&& value) {
  
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpss.ConsumeRequest.XID)
}
#endif
inline void ConsumeRequest::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpss.ConsumeRequest.XID)
}
inline void ConsumeRequest::set_xid(const char* value, size_t size) {
  
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpss.ConsumeRequest.XID)
}
inline ::std::string* ConsumeRequest::mutable_xid() {
  
  // @@protoc_insertion_point(field_mutable:gpss.ConsumeRequest.XID)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConsumeRequest::release_xid() {
  // @@protoc_insertion_point(field_release:gpss.ConsumeRequest.XID)
  
  return xid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConsumeRequest::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    
  } else {
    
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:gpss.ConsumeRequest.XID)
}

// int32 CID = 2;
inline void ConsumeRequest::clear_cid() {
  cid_ = 0;
}
inline ::google::protobuf::int32 ConsumeRequest::cid() const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.CID)
  return cid_;
}
inline void ConsumeRequest::set_cid(::google::protobuf::int32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:gpss.ConsumeRequest.CID)
}

// int32 SN = 3;
inline void ConsumeRequest::clear_sn() {
  sn_ = 0;
}
inline ::google::protobuf::int32 ConsumeRequest::sn() const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.SN)
  return sn_;
}
inline void ConsumeRequest::set_sn(::google::protobuf::int32 value) {
  
  sn_ = value;
  // @@protoc_insertion_point(field_set:gpss.ConsumeRequest.SN)
}

// int32 SegmentID = 4;
inline void ConsumeRequest::clear_segmentid() {
  segmentid_ = 0;
}
inline ::google::protobuf::int32 ConsumeRequest::segmentid() const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.SegmentID)
  return segmentid_;
}
inline void ConsumeRequest::set_segmentid(::google::protobuf::int32 value) {
  
  segmentid_ = value;
  // @@protoc_insertion_point(field_set:gpss.ConsumeRequest.SegmentID)
}

// int32 SegmentCount = 5;
inline void ConsumeRequest::clear_segmentcount() {
  segmentcount_ = 0;
}
inline ::google::protobuf::int32 ConsumeRequest::segmentcount() const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.SegmentCount)
  return segmentcount_;
}
inline void ConsumeRequest::set_segmentcount(::google::protobuf::int32 value) {
  
  segmentcount_ = value;
  // @@protoc_insertion_point(field_set:gpss.ConsumeRequest.SegmentCount)
}

// int32 SessionID = 6;
inline void ConsumeRequest::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 ConsumeRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.SessionID)
  return sessionid_;
}
inline void ConsumeRequest::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:gpss.ConsumeRequest.SessionID)
}

// repeated .gpss.Parameter Parameters = 7;
inline int ConsumeRequest::parameters_size() const {
  return parameters_.size();
}
inline void ConsumeRequest::clear_parameters() {
  parameters_.Clear();
}
inline ::gpss::Parameter* ConsumeRequest::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:gpss.ConsumeRequest.Parameters)
  return parameters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gpss::Parameter >*
ConsumeRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:gpss.ConsumeRequest.Parameters)
  return &parameters_;
}
inline const ::gpss::Parameter& ConsumeRequest::parameters(int index) const {
  // @@protoc_insertion_point(field_get:gpss.ConsumeRequest.Parameters)
  return parameters_.Get(index);
}
inline ::gpss::Parameter* ConsumeRequest::add_parameters() {
  // @@protoc_insertion_point(field_add:gpss.ConsumeRequest.Parameters)
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gpss::Parameter >&
ConsumeRequest::parameters() const {
  // @@protoc_insertion_point(field_list:gpss.ConsumeRequest.Parameters)
  return parameters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpss

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stream_2eproto
